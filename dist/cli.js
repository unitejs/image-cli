"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
/**
 * Main entry point.
 */
const cliBase_1 = require("unitejs-cli-core/dist/cliBase");
const icns_1 = require("unitejs-image/dist/icns");
const ico_1 = require("unitejs-image/dist/ico");
const svg_1 = require("unitejs-image/dist/svg");
const commandLineArgConstants_1 = require("./commandLineArgConstants");
const commandLineCommandConstants_1 = require("./commandLineCommandConstants");
class CLI extends cliBase_1.CLIBase {
    constructor() {
        super(CLI.APP_NAME);
    }
    handleCustomCommand(logger, fileSystem, commandLineParser) {
        return __awaiter(this, void 0, void 0, function* () {
            let ret = -1;
            const command = commandLineParser.getCommand();
            switch (command) {
                case commandLineCommandConstants_1.CommandLineCommandConstants.SVG_TO_PNG: {
                    logger.info("command", { command });
                    const sourceFile = commandLineParser.getStringArgument(commandLineArgConstants_1.CommandLineArgConstants.SOURCE_FILE);
                    const destFile = commandLineParser.getStringArgument(commandLineArgConstants_1.CommandLineArgConstants.DEST_FILE);
                    const width = commandLineParser.getNumberArgument(commandLineArgConstants_1.CommandLineArgConstants.WIDTH);
                    const height = commandLineParser.getNumberArgument(commandLineArgConstants_1.CommandLineArgConstants.HEIGHT);
                    const marginX = commandLineParser.getNumberArgument(commandLineArgConstants_1.CommandLineArgConstants.MARGIN_X);
                    const marginY = commandLineParser.getNumberArgument(commandLineArgConstants_1.CommandLineArgConstants.MARGIN_Y);
                    const background = commandLineParser.getStringArgument(commandLineArgConstants_1.CommandLineArgConstants.BACKGROUND);
                    ret = this.checkRemaining(logger, commandLineParser);
                    if (ret === 0) {
                        const svg = new svg_1.SVG();
                        ret = yield svg.toPng(logger, fileSystem, fileSystem.pathGetDirectory(sourceFile), fileSystem.pathGetFilename(sourceFile), fileSystem.pathGetDirectory(destFile), fileSystem.pathGetFilename(destFile), width, height, marginX, marginY, background);
                    }
                    break;
                }
                case commandLineCommandConstants_1.CommandLineCommandConstants.SVG_TO_MASK: {
                    logger.info("command", { command });
                    const sourceFile = commandLineParser.getStringArgument(commandLineArgConstants_1.CommandLineArgConstants.SOURCE_FILE);
                    const destFile = commandLineParser.getStringArgument(commandLineArgConstants_1.CommandLineArgConstants.DEST_FILE);
                    ret = this.checkRemaining(logger, commandLineParser);
                    if (ret === 0) {
                        const svg = new svg_1.SVG();
                        ret = yield svg.toMask(logger, fileSystem, fileSystem.pathGetDirectory(sourceFile), fileSystem.pathGetFilename(sourceFile), fileSystem.pathGetDirectory(destFile), fileSystem.pathGetFilename(destFile));
                    }
                    break;
                }
                case commandLineCommandConstants_1.CommandLineCommandConstants.PNGS_TO_ICO: {
                    logger.info("command", { command });
                    const sourceFolder = commandLineParser.getStringArgument(commandLineArgConstants_1.CommandLineArgConstants.SOURCE_FOLDER);
                    const sourceFiles = commandLineParser.getStringArgument(commandLineArgConstants_1.CommandLineArgConstants.SOURCE_FILES);
                    const destFile = commandLineParser.getStringArgument(commandLineArgConstants_1.CommandLineArgConstants.DEST_FILE);
                    ret = this.checkRemaining(logger, commandLineParser);
                    if (ret === 0) {
                        const ico = new ico_1.ICO();
                        ret = yield ico.fromPngs(logger, fileSystem, sourceFolder, sourceFiles ? sourceFiles.split(",") : [], fileSystem.pathGetDirectory(destFile), fileSystem.pathGetFilename(destFile));
                    }
                    break;
                }
                case commandLineCommandConstants_1.CommandLineCommandConstants.PNG_TO_ICNS: {
                    logger.info("command", { command });
                    const sourceFile = commandLineParser.getStringArgument(commandLineArgConstants_1.CommandLineArgConstants.SOURCE_FILE);
                    const destFile = commandLineParser.getStringArgument(commandLineArgConstants_1.CommandLineArgConstants.DEST_FILE);
                    ret = this.checkRemaining(logger, commandLineParser);
                    if (ret === 0) {
                        const icns = new icns_1.ICNS();
                        ret = yield icns.fromPng(logger, fileSystem, fileSystem.pathGetDirectory(sourceFile), fileSystem.pathGetFilename(sourceFile), fileSystem.pathGetDirectory(destFile), fileSystem.pathGetFilename(destFile));
                    }
                }
            }
            return ret;
        });
    }
    displayHelp(logger) {
        logger.banner("Commands");
        logger.info("  help, version, svgToPng, svgToMask, pngsToIco");
        logger.info("");
        logger.banner("svgToPng");
        logger.info("");
        this.markdownTableToCli(logger, "| sourceFile          | 'path to svg file'                           | Source svg image to generate png                 |");
        this.markdownTableToCli(logger, "| destFile            | 'path to png file'                           | Destination image for generated png              |");
        this.markdownTableToCli(logger, "| width               | number                                       | The width in pixels to generate png              |");
        this.markdownTableToCli(logger, "| height              | number                                       | The height in pixels to generate png             |");
        this.markdownTableToCli(logger, "| marginX             | number                                       | The margin in pixels to leave at left and right  |");
        this.markdownTableToCli(logger, "|                     |                                              |   optional - defaults to 0                       |");
        this.markdownTableToCli(logger, "| marginY             | number                                       | The margin in pixels to leave at top and bottom  |");
        this.markdownTableToCli(logger, "|                     |                                              |   optional - defaults to 0                       |");
        this.markdownTableToCli(logger, "| background          | hex color                                    | The colour to fill the background                |");
        this.markdownTableToCli(logger, "|                     |                                              |   optional - defaults to transparent             |");
        logger.info("");
        logger.banner("svgToMask");
        logger.info("");
        this.markdownTableToCli(logger, "| sourceFile          | 'path to svg file'                           | Source svg image to generate svg mask            |");
        this.markdownTableToCli(logger, "| destFile            | 'path to svg mask file'                      | Destination image for generated svg mask         |");
        logger.info("");
        logger.banner("pngsToIco");
        logger.info("");
        this.markdownTableToCli(logger, "| sourceFolder        | 'folder'                                     | The folder that contains the png files           |");
        this.markdownTableToCli(logger, "| sourceFiles         | comma separated list of filenames            | The files to combine from the sourceFolder       |");
        this.markdownTableToCli(logger, "| destFile            | 'path to ico file'                           | Destination image for generated ico              |");
        logger.info("");
        logger.banner("pngToIcns");
        logger.info("");
        this.markdownTableToCli(logger, "| sourceFile          | 'path to png file'                           | Source png image to generate icns                |");
        this.markdownTableToCli(logger, "| destFile            | 'path to icns file'                          | Destination image for generated icns             |");
        logger.info("");
        logger.banner("Global Arguments");
        logger.info("");
        this.markdownTableToCli(logger, "| noColor             |                                           | If this is used no color will appear in output   |");
        this.markdownTableToCli(logger, "|                     |                                           |   optional - defaults to on                      |");
        this.markdownTableToCli(logger, "| logFile             | 'filename'                                | The log file to store the logging in             |");
        this.markdownTableToCli(logger, "|                     |                                           |   optional - defaults to no file logging         |");
        this.markdownTableToCli(logger, "");
        logger.info("");
        logger.banner("More Information");
        logger.info("");
        logger.info("  See https://github.com/unitejs/image-cli#readme for further details.");
        return 0;
    }
}
CLI.APP_NAME = "UniteJS Image";
exports.CLI = CLI;

//# sourceMappingURL=data:application/json;charset=utf8;base64,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LENBQUMsa0JBQWtCLENBQUMsQ0FBQztRQUNsQyxNQUFNLENBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQyxDQUFDO1FBQ2hCLE1BQU0sQ0FBQyxJQUFJLENBQUMsd0VBQXdFLENBQUMsQ0FBQztRQUV0RixPQUFPLENBQUMsQ0FBQztJQUNiLENBQUM7O0FBMUp1QixZQUFRLEdBQVcsZUFBZSxDQUFDO0FBRC9ELGtCQTRKQyIsImZpbGUiOiJjbGkuanMiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIE1haW4gZW50cnkgcG9pbnQuXG4gKi9cbmltcG9ydCB7IENMSUJhc2UgfSBmcm9tIFwidW5pdGVqcy1jbGktY29yZS9kaXN0L2NsaUJhc2VcIjtcbmltcG9ydCB7IENvbW1hbmRMaW5lUGFyc2VyIH0gZnJvbSBcInVuaXRlanMtY2xpLWNvcmUvZGlzdC9jb21tYW5kTGluZVBhcnNlclwiO1xuaW1wb3J0IHsgSUZpbGVTeXN0ZW0gfSBmcm9tIFwidW5pdGVqcy1mcmFtZXdvcmsvZGlzdC9pbnRlcmZhY2VzL0lGaWxlU3lzdGVtXCI7XG5pbXBvcnQgeyBJTG9nZ2VyIH0gZnJvbSBcInVuaXRlanMtZnJhbWV3b3JrL2Rpc3QvaW50ZXJmYWNlcy9JTG9nZ2VyXCI7XG5pbXBvcnQgeyBJQ05TIH0gZnJvbSBcInVuaXRlanMtaW1hZ2UvZGlzdC9pY25zXCI7XG5pbXBvcnQgeyBJQ08gfSBmcm9tIFwidW5pdGVqcy1pbWFnZS9kaXN0L2ljb1wiO1xuaW1wb3J0IHsgU1ZHIH0gZnJvbSBcInVuaXRlanMtaW1hZ2UvZGlzdC9zdmdcIjtcbmltcG9ydCB7IENvbW1hbmRMaW5lQXJnQ29uc3RhbnRzIH0gZnJvbSBcIi4vY29tbWFuZExpbmVBcmdDb25zdGFudHNcIjtcbmltcG9ydCB7IENvbW1hbmRMaW5lQ29tbWFuZENvbnN0YW50cyB9IGZyb20gXCIuL2NvbW1hbmRMaW5lQ29tbWFuZENvbnN0YW50c1wiO1xuXG5leHBvcnQgY2xhc3MgQ0xJIGV4dGVuZHMgQ0xJQmFzZSB7XG4gICAgcHJpdmF0ZSBzdGF0aWMgcmVhZG9ubHkgQVBQX05BTUU6IHN0cmluZyA9IFwiVW5pdGVKUyBJbWFnZVwiO1xuXG4gICAgY29uc3RydWN0b3IoKSB7XG4gICAgICAgIHN1cGVyKENMSS5BUFBfTkFNRSk7XG4gICAgfVxuXG4gICAgcHVibGljIGFzeW5jIGhhbmRsZUN1c3RvbUNvbW1hbmQobG9nZ2VyOiBJTG9nZ2VyLCBmaWxlU3lzdGVtOiBJRmlsZVN5c3RlbSwgY29tbWFuZExpbmVQYXJzZXI6IENvbW1hbmRMaW5lUGFyc2VyKTogUHJvbWlzZTxudW1iZXI+IHtcbiAgICAgICAgbGV0IHJldDogbnVtYmVyID0gLTE7XG5cbiAgICAgICAgY29uc3QgY29tbWFuZCA9IGNvbW1hbmRMaW5lUGFyc2VyLmdldENvbW1hbmQoKTtcblxuICAgICAgICBzd2l0Y2ggKGNvbW1hbmQpIHtcbiAgICAgICAgICAgIGNhc2UgQ29tbWFuZExpbmVDb21tYW5kQ29uc3RhbnRzLlNWR19UT19QTkc6IHtcbiAgICAgICAgICAgICAgICBsb2dnZXIuaW5mbyhcImNvbW1hbmRcIiwgeyBjb21tYW5kIH0pO1xuXG4gICAgICAgICAgICAgICAgY29uc3Qgc291cmNlRmlsZSA9IGNvbW1hbmRMaW5lUGFyc2VyLmdldFN0cmluZ0FyZ3VtZW50KENvbW1hbmRMaW5lQXJnQ29uc3RhbnRzLlNPVVJDRV9GSUxFKTtcbiAgICAgICAgICAgICAgICBjb25zdCBkZXN0RmlsZSA9IGNvbW1hbmRMaW5lUGFyc2VyLmdldFN0cmluZ0FyZ3VtZW50KENvbW1hbmRMaW5lQXJnQ29uc3RhbnRzLkRFU1RfRklMRSk7XG4gICAgICAgICAgICAgICAgY29uc3Qgd2lkdGggPSBjb21tYW5kTGluZVBhcnNlci5nZXROdW1iZXJBcmd1bWVudChDb21tYW5kTGluZUFyZ0NvbnN0YW50cy5XSURUSCk7XG4gICAgICAgICAgICAgICAgY29uc3QgaGVpZ2h0ID0gY29tbWFuZExpbmVQYXJzZXIuZ2V0TnVtYmVyQXJndW1lbnQoQ29tbWFuZExpbmVBcmdDb25zdGFudHMuSEVJR0hUKTtcbiAgICAgICAgICAgICAgICBjb25zdCBtYXJnaW5YID0gY29tbWFuZExpbmVQYXJzZXIuZ2V0TnVtYmVyQXJndW1lbnQoQ29tbWFuZExpbmVBcmdDb25zdGFudHMuTUFSR0lOX1gpO1xuICAgICAgICAgICAgICAgIGNvbnN0IG1hcmdpblkgPSBjb21tYW5kTGluZVBhcnNlci5nZXROdW1iZXJBcmd1bWVudChDb21tYW5kTGluZUFyZ0NvbnN0YW50cy5NQVJHSU5fWSk7XG4gICAgICAgICAgICAgICAgY29uc3QgYmFja2dyb3VuZCA9IGNvbW1hbmRMaW5lUGFyc2VyLmdldFN0cmluZ0FyZ3VtZW50KENvbW1hbmRMaW5lQXJnQ29uc3RhbnRzLkJBQ0tHUk9VTkQpO1xuXG4gICAgICAgICAgICAgICAgcmV0ID0gdGhpcy5jaGVja1JlbWFpbmluZyhsb2dnZXIsIGNvbW1hbmRMaW5lUGFyc2VyKTtcbiAgICAgICAgICAgICAgICBpZiAocmV0ID09PSAwKSB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IHN2ZyA9IG5ldyBTVkcoKTtcbiAgICAgICAgICAgICAgICAgICAgcmV0ID0gYXdhaXQgc3ZnLnRvUG5nKGxvZ2dlcixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZpbGVTeXN0ZW0sXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmaWxlU3lzdGVtLnBhdGhHZXREaXJlY3Rvcnkoc291cmNlRmlsZSksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmaWxlU3lzdGVtLnBhdGhHZXRGaWxlbmFtZShzb3VyY2VGaWxlKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZpbGVTeXN0ZW0ucGF0aEdldERpcmVjdG9yeShkZXN0RmlsZSksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmaWxlU3lzdGVtLnBhdGhHZXRGaWxlbmFtZShkZXN0RmlsZSksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB3aWR0aCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGhlaWdodCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1hcmdpblgsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtYXJnaW5ZLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYmFja2dyb3VuZCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBjYXNlIENvbW1hbmRMaW5lQ29tbWFuZENvbnN0YW50cy5TVkdfVE9fTUFTSzoge1xuICAgICAgICAgICAgICAgIGxvZ2dlci5pbmZvKFwiY29tbWFuZFwiLCB7IGNvbW1hbmQgfSk7XG5cbiAgICAgICAgICAgICAgICBjb25zdCBzb3VyY2VGaWxlID0gY29tbWFuZExpbmVQYXJzZXIuZ2V0U3RyaW5nQXJndW1lbnQoQ29tbWFuZExpbmVBcmdDb25zdGFudHMuU09VUkNFX0ZJTEUpO1xuICAgICAgICAgICAgICAgIGNvbnN0IGRlc3RGaWxlID0gY29tbWFuZExpbmVQYXJzZXIuZ2V0U3RyaW5nQXJndW1lbnQoQ29tbWFuZExpbmVBcmdDb25zdGFudHMuREVTVF9GSUxFKTtcblxuICAgICAgICAgICAgICAgIHJldCA9IHRoaXMuY2hlY2tSZW1haW5pbmcobG9nZ2VyLCBjb21tYW5kTGluZVBhcnNlcik7XG4gICAgICAgICAgICAgICAgaWYgKHJldCA9PT0gMCkge1xuICAgICAgICAgICAgICAgICAgICBjb25zdCBzdmcgPSBuZXcgU1ZHKCk7XG4gICAgICAgICAgICAgICAgICAgIHJldCA9IGF3YWl0IHN2Zy50b01hc2sobG9nZ2VyLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZpbGVTeXN0ZW0sXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZmlsZVN5c3RlbS5wYXRoR2V0RGlyZWN0b3J5KHNvdXJjZUZpbGUpLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZpbGVTeXN0ZW0ucGF0aEdldEZpbGVuYW1lKHNvdXJjZUZpbGUpLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZpbGVTeXN0ZW0ucGF0aEdldERpcmVjdG9yeShkZXN0RmlsZSksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZmlsZVN5c3RlbS5wYXRoR2V0RmlsZW5hbWUoZGVzdEZpbGUpKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGNhc2UgQ29tbWFuZExpbmVDb21tYW5kQ29uc3RhbnRzLlBOR1NfVE9fSUNPOiB7XG4gICAgICAgICAgICAgICAgbG9nZ2VyLmluZm8oXCJjb21tYW5kXCIsIHsgY29tbWFuZCB9KTtcblxuICAgICAgICAgICAgICAgIGNvbnN0IHNvdXJjZUZvbGRlciA9IGNvbW1hbmRMaW5lUGFyc2VyLmdldFN0cmluZ0FyZ3VtZW50KENvbW1hbmRMaW5lQXJnQ29uc3RhbnRzLlNPVVJDRV9GT0xERVIpO1xuICAgICAgICAgICAgICAgIGNvbnN0IHNvdXJjZUZpbGVzID0gY29tbWFuZExpbmVQYXJzZXIuZ2V0U3RyaW5nQXJndW1lbnQoQ29tbWFuZExpbmVBcmdDb25zdGFudHMuU09VUkNFX0ZJTEVTKTtcbiAgICAgICAgICAgICAgICBjb25zdCBkZXN0RmlsZSA9IGNvbW1hbmRMaW5lUGFyc2VyLmdldFN0cmluZ0FyZ3VtZW50KENvbW1hbmRMaW5lQXJnQ29uc3RhbnRzLkRFU1RfRklMRSk7XG5cbiAgICAgICAgICAgICAgICByZXQgPSB0aGlzLmNoZWNrUmVtYWluaW5nKGxvZ2dlciwgY29tbWFuZExpbmVQYXJzZXIpO1xuICAgICAgICAgICAgICAgIGlmIChyZXQgPT09IDApIHtcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgaWNvID0gbmV3IElDTygpO1xuICAgICAgICAgICAgICAgICAgICByZXQgPSBhd2FpdCBpY28uZnJvbVBuZ3MobG9nZ2VyLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZmlsZVN5c3RlbSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNvdXJjZUZvbGRlcixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNvdXJjZUZpbGVzID8gc291cmNlRmlsZXMuc3BsaXQoXCIsXCIpIDogW10sXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmaWxlU3lzdGVtLnBhdGhHZXREaXJlY3RvcnkoZGVzdEZpbGUpLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZmlsZVN5c3RlbS5wYXRoR2V0RmlsZW5hbWUoZGVzdEZpbGUpKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGNhc2UgQ29tbWFuZExpbmVDb21tYW5kQ29uc3RhbnRzLlBOR19UT19JQ05TOiB7XG4gICAgICAgICAgICAgICAgbG9nZ2VyLmluZm8oXCJjb21tYW5kXCIsIHsgY29tbWFuZCB9KTtcblxuICAgICAgICAgICAgICAgIGNvbnN0IHNvdXJjZUZpbGUgPSBjb21tYW5kTGluZVBhcnNlci5nZXRTdHJpbmdBcmd1bWVudChDb21tYW5kTGluZUFyZ0NvbnN0YW50cy5TT1VSQ0VfRklMRSk7XG4gICAgICAgICAgICAgICAgY29uc3QgZGVzdEZpbGUgPSBjb21tYW5kTGluZVBhcnNlci5nZXRTdHJpbmdBcmd1bWVudChDb21tYW5kTGluZUFyZ0NvbnN0YW50cy5ERVNUX0ZJTEUpO1xuXG4gICAgICAgICAgICAgICAgcmV0ID0gdGhpcy5jaGVja1JlbWFpbmluZyhsb2dnZXIsIGNvbW1hbmRMaW5lUGFyc2VyKTtcbiAgICAgICAgICAgICAgICBpZiAocmV0ID09PSAwKSB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGljbnMgPSBuZXcgSUNOUygpO1xuICAgICAgICAgICAgICAgICAgICByZXQgPSBhd2FpdCBpY25zLmZyb21QbmcobG9nZ2VyLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZmlsZVN5c3RlbSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZpbGVTeXN0ZW0ucGF0aEdldERpcmVjdG9yeShzb3VyY2VGaWxlKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZpbGVTeXN0ZW0ucGF0aEdldEZpbGVuYW1lKHNvdXJjZUZpbGUpLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZmlsZVN5c3RlbS5wYXRoR2V0RGlyZWN0b3J5KGRlc3RGaWxlKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZpbGVTeXN0ZW0ucGF0aEdldEZpbGVuYW1lKGRlc3RGaWxlKSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIHJldDtcbiAgICB9XG5cbiAgICBwdWJsaWMgZGlzcGxheUhlbHAobG9nZ2VyOiBJTG9nZ2VyKTogbnVtYmVyIHtcbiAgICAgICAgbG9nZ2VyLmJhbm5lcihcIkNvbW1hbmRzXCIpO1xuICAgICAgICBsb2dnZXIuaW5mbyhcIiAgaGVscCwgdmVyc2lvbiwgc3ZnVG9QbmcsIHN2Z1RvTWFzaywgcG5nc1RvSWNvXCIpO1xuICAgICAgICBsb2dnZXIuaW5mbyhcIlwiKTtcblxuICAgICAgICBsb2dnZXIuYmFubmVyKFwic3ZnVG9QbmdcIik7XG4gICAgICAgIGxvZ2dlci5pbmZvKFwiXCIpO1xuICAgICAgICB0aGlzLm1hcmtkb3duVGFibGVUb0NsaShsb2dnZXIsIFwifCBzb3VyY2VGaWxlICAgICAgICAgIHwgJ3BhdGggdG8gc3ZnIGZpbGUnICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBTb3VyY2Ugc3ZnIGltYWdlIHRvIGdlbmVyYXRlIHBuZyAgICAgICAgICAgICAgICAgfFwiKTtcbiAgICAgICAgdGhpcy5tYXJrZG93blRhYmxlVG9DbGkobG9nZ2VyLCBcInwgZGVzdEZpbGUgICAgICAgICAgICB8ICdwYXRoIHRvIHBuZyBmaWxlJyAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgRGVzdGluYXRpb24gaW1hZ2UgZm9yIGdlbmVyYXRlZCBwbmcgICAgICAgICAgICAgIHxcIik7XG4gICAgICAgIHRoaXMubWFya2Rvd25UYWJsZVRvQ2xpKGxvZ2dlciwgXCJ8IHdpZHRoICAgICAgICAgICAgICAgfCBudW1iZXIgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IFRoZSB3aWR0aCBpbiBwaXhlbHMgdG8gZ2VuZXJhdGUgcG5nICAgICAgICAgICAgICB8XCIpO1xuICAgICAgICB0aGlzLm1hcmtkb3duVGFibGVUb0NsaShsb2dnZXIsIFwifCBoZWlnaHQgICAgICAgICAgICAgIHwgbnVtYmVyICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBUaGUgaGVpZ2h0IGluIHBpeGVscyB0byBnZW5lcmF0ZSBwbmcgICAgICAgICAgICAgfFwiKTtcbiAgICAgICAgdGhpcy5tYXJrZG93blRhYmxlVG9DbGkobG9nZ2VyLCBcInwgbWFyZ2luWCAgICAgICAgICAgICB8IG51bWJlciAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgVGhlIG1hcmdpbiBpbiBwaXhlbHMgdG8gbGVhdmUgYXQgbGVmdCBhbmQgcmlnaHQgIHxcIik7XG4gICAgICAgIHRoaXMubWFya2Rvd25UYWJsZVRvQ2xpKGxvZ2dlciwgXCJ8ICAgICAgICAgICAgICAgICAgICAgfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8ICAgb3B0aW9uYWwgLSBkZWZhdWx0cyB0byAwICAgICAgICAgICAgICAgICAgICAgICB8XCIpO1xuICAgICAgICB0aGlzLm1hcmtkb3duVGFibGVUb0NsaShsb2dnZXIsIFwifCBtYXJnaW5ZICAgICAgICAgICAgIHwgbnVtYmVyICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBUaGUgbWFyZ2luIGluIHBpeGVscyB0byBsZWF2ZSBhdCB0b3AgYW5kIGJvdHRvbSAgfFwiKTtcbiAgICAgICAgdGhpcy5tYXJrZG93blRhYmxlVG9DbGkobG9nZ2VyLCBcInwgICAgICAgICAgICAgICAgICAgICB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgICBvcHRpb25hbCAtIGRlZmF1bHRzIHRvIDAgICAgICAgICAgICAgICAgICAgICAgIHxcIik7XG4gICAgICAgIHRoaXMubWFya2Rvd25UYWJsZVRvQ2xpKGxvZ2dlciwgXCJ8IGJhY2tncm91bmQgICAgICAgICAgfCBoZXggY29sb3IgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IFRoZSBjb2xvdXIgdG8gZmlsbCB0aGUgYmFja2dyb3VuZCAgICAgICAgICAgICAgICB8XCIpO1xuICAgICAgICB0aGlzLm1hcmtkb3duVGFibGVUb0NsaShsb2dnZXIsIFwifCAgICAgICAgICAgICAgICAgICAgIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCAgIG9wdGlvbmFsIC0gZGVmYXVsdHMgdG8gdHJhbnNwYXJlbnQgICAgICAgICAgICAgfFwiKTtcbiAgICAgICAgbG9nZ2VyLmluZm8oXCJcIik7XG5cbiAgICAgICAgbG9nZ2VyLmJhbm5lcihcInN2Z1RvTWFza1wiKTtcbiAgICAgICAgbG9nZ2VyLmluZm8oXCJcIik7XG4gICAgICAgIHRoaXMubWFya2Rvd25UYWJsZVRvQ2xpKGxvZ2dlciwgXCJ8IHNvdXJjZUZpbGUgICAgICAgICAgfCAncGF0aCB0byBzdmcgZmlsZScgICAgICAgICAgICAgICAgICAgICAgICAgICB8IFNvdXJjZSBzdmcgaW1hZ2UgdG8gZ2VuZXJhdGUgc3ZnIG1hc2sgICAgICAgICAgICB8XCIpO1xuICAgICAgICB0aGlzLm1hcmtkb3duVGFibGVUb0NsaShsb2dnZXIsIFwifCBkZXN0RmlsZSAgICAgICAgICAgIHwgJ3BhdGggdG8gc3ZnIG1hc2sgZmlsZScgICAgICAgICAgICAgICAgICAgICAgfCBEZXN0aW5hdGlvbiBpbWFnZSBmb3IgZ2VuZXJhdGVkIHN2ZyBtYXNrICAgICAgICAgfFwiKTtcbiAgICAgICAgbG9nZ2VyLmluZm8oXCJcIik7XG5cbiAgICAgICAgbG9nZ2VyLmJhbm5lcihcInBuZ3NUb0ljb1wiKTtcbiAgICAgICAgbG9nZ2VyLmluZm8oXCJcIik7XG4gICAgICAgIHRoaXMubWFya2Rvd25UYWJsZVRvQ2xpKGxvZ2dlciwgXCJ8IHNvdXJjZUZvbGRlciAgICAgICAgfCAnZm9sZGVyJyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IFRoZSBmb2xkZXIgdGhhdCBjb250YWlucyB0aGUgcG5nIGZpbGVzICAgICAgICAgICB8XCIpO1xuICAgICAgICB0aGlzLm1hcmtkb3duVGFibGVUb0NsaShsb2dnZXIsIFwifCBzb3VyY2VGaWxlcyAgICAgICAgIHwgY29tbWEgc2VwYXJhdGVkIGxpc3Qgb2YgZmlsZW5hbWVzICAgICAgICAgICAgfCBUaGUgZmlsZXMgdG8gY29tYmluZSBmcm9tIHRoZSBzb3VyY2VGb2xkZXIgICAgICAgfFwiKTtcbiAgICAgICAgdGhpcy5tYXJrZG93blRhYmxlVG9DbGkobG9nZ2VyLCBcInwgZGVzdEZpbGUgICAgICAgICAgICB8ICdwYXRoIHRvIGljbyBmaWxlJyAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgRGVzdGluYXRpb24gaW1hZ2UgZm9yIGdlbmVyYXRlZCBpY28gICAgICAgICAgICAgIHxcIik7XG4gICAgICAgIGxvZ2dlci5pbmZvKFwiXCIpO1xuXG4gICAgICAgIGxvZ2dlci5iYW5uZXIoXCJwbmdUb0ljbnNcIik7XG4gICAgICAgIGxvZ2dlci5pbmZvKFwiXCIpO1xuICAgICAgICB0aGlzLm1hcmtkb3duVGFibGVUb0NsaShsb2dnZXIsIFwifCBzb3VyY2VGaWxlICAgICAgICAgIHwgJ3BhdGggdG8gcG5nIGZpbGUnICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBTb3VyY2UgcG5nIGltYWdlIHRvIGdlbmVyYXRlIGljbnMgICAgICAgICAgICAgICAgfFwiKTtcbiAgICAgICAgdGhpcy5tYXJrZG93blRhYmxlVG9DbGkobG9nZ2VyLCBcInwgZGVzdEZpbGUgICAgICAgICAgICB8ICdwYXRoIHRvIGljbnMgZmlsZScgICAgICAgICAgICAgICAgICAgICAgICAgIHwgRGVzdGluYXRpb24gaW1hZ2UgZm9yIGdlbmVyYXRlZCBpY25zICAgICAgICAgICAgIHxcIik7XG4gICAgICAgIGxvZ2dlci5pbmZvKFwiXCIpO1xuXG4gICAgICAgIGxvZ2dlci5iYW5uZXIoXCJHbG9iYWwgQXJndW1lbnRzXCIpO1xuICAgICAgICBsb2dnZXIuaW5mbyhcIlwiKTtcbiAgICAgICAgdGhpcy5tYXJrZG93blRhYmxlVG9DbGkobG9nZ2VyLCBcInwgbm9Db2xvciAgICAgICAgICAgICB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgSWYgdGhpcyBpcyB1c2VkIG5vIGNvbG9yIHdpbGwgYXBwZWFyIGluIG91dHB1dCAgIHxcIik7XG4gICAgICAgIHRoaXMubWFya2Rvd25UYWJsZVRvQ2xpKGxvZ2dlciwgXCJ8ICAgICAgICAgICAgICAgICAgICAgfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8ICAgb3B0aW9uYWwgLSBkZWZhdWx0cyB0byBvbiAgICAgICAgICAgICAgICAgICAgICB8XCIpO1xuICAgICAgICB0aGlzLm1hcmtkb3duVGFibGVUb0NsaShsb2dnZXIsIFwifCBsb2dGaWxlICAgICAgICAgICAgIHwgJ2ZpbGVuYW1lJyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBUaGUgbG9nIGZpbGUgdG8gc3RvcmUgdGhlIGxvZ2dpbmcgaW4gICAgICAgICAgICAgfFwiKTtcbiAgICAgICAgdGhpcy5tYXJrZG93blRhYmxlVG9DbGkobG9nZ2VyLCBcInwgICAgICAgICAgICAgICAgICAgICB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgICBvcHRpb25hbCAtIGRlZmF1bHRzIHRvIG5vIGZpbGUgbG9nZ2luZyAgICAgICAgIHxcIik7XG4gICAgICAgIHRoaXMubWFya2Rvd25UYWJsZVRvQ2xpKGxvZ2dlciwgXCJcIik7XG4gICAgICAgIGxvZ2dlci5pbmZvKFwiXCIpO1xuXG4gICAgICAgIGxvZ2dlci5iYW5uZXIoXCJNb3JlIEluZm9ybWF0aW9uXCIpO1xuICAgICAgICBsb2dnZXIuaW5mbyhcIlwiKTtcbiAgICAgICAgbG9nZ2VyLmluZm8oXCIgIFNlZSBodHRwczovL2dpdGh1Yi5jb20vdW5pdGVqcy9pbWFnZS1jbGkjcmVhZG1lIGZvciBmdXJ0aGVyIGRldGFpbHMuXCIpO1xuXG4gICAgICAgIHJldHVybiAwO1xuICAgIH1cbn1cbiJdfQ==
