"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
/**
 * Main entry point.
 */
const cliBase_1 = require("unitejs-cli-core/dist/cliBase");
const icns_1 = require("unitejs-image/dist/icns");
const ico_1 = require("unitejs-image/dist/ico");
const svg_1 = require("unitejs-image/dist/svg");
const commandLineArgConstants_1 = require("./commandLineArgConstants");
const commandLineCommandConstants_1 = require("./commandLineCommandConstants");
class CLI extends cliBase_1.CLIBase {
    constructor() {
        super(CLI.APP_NAME);
    }
    handleCustomCommand(logger, fileSystem, commandLineParser) {
        return __awaiter(this, void 0, void 0, function* () {
            let ret = -1;
            const command = commandLineParser.getCommand();
            switch (command) {
                case commandLineCommandConstants_1.CommandLineCommandConstants.SVG_TO_PNG: {
                    logger.info("command", { command });
                    const sourceFile = commandLineParser.getStringArgument(commandLineArgConstants_1.CommandLineArgConstants.SOURCE_FILE);
                    const destFile = commandLineParser.getStringArgument(commandLineArgConstants_1.CommandLineArgConstants.DEST_FILE);
                    const width = commandLineParser.getNumberArgument(commandLineArgConstants_1.CommandLineArgConstants.WIDTH);
                    const height = commandLineParser.getNumberArgument(commandLineArgConstants_1.CommandLineArgConstants.HEIGHT);
                    const marginX = commandLineParser.getNumberArgument(commandLineArgConstants_1.CommandLineArgConstants.MARGIN_X);
                    const marginY = commandLineParser.getNumberArgument(commandLineArgConstants_1.CommandLineArgConstants.MARGIN_Y);
                    const background = commandLineParser.getStringArgument(commandLineArgConstants_1.CommandLineArgConstants.BACKGROUND);
                    ret = this.checkRemaining(logger, commandLineParser);
                    if (ret === 0) {
                        const svg = new svg_1.SVG();
                        ret = yield svg.toPng(logger, fileSystem, fileSystem.pathGetDirectory(sourceFile), fileSystem.pathGetFilename(sourceFile), fileSystem.pathGetDirectory(destFile), fileSystem.pathGetFilename(destFile), width, height, marginX, marginY, background);
                    }
                    break;
                }
                case commandLineCommandConstants_1.CommandLineCommandConstants.SVG_TO_MASK: {
                    logger.info("command", { command });
                    const sourceFile = commandLineParser.getStringArgument(commandLineArgConstants_1.CommandLineArgConstants.SOURCE_FILE);
                    const destFile = commandLineParser.getStringArgument(commandLineArgConstants_1.CommandLineArgConstants.DEST_FILE);
                    ret = this.checkRemaining(logger, commandLineParser);
                    if (ret === 0) {
                        const svg = new svg_1.SVG();
                        ret = yield svg.toMask(logger, fileSystem, fileSystem.pathGetDirectory(sourceFile), fileSystem.pathGetFilename(sourceFile), fileSystem.pathGetDirectory(destFile), fileSystem.pathGetFilename(destFile));
                    }
                    break;
                }
                case commandLineCommandConstants_1.CommandLineCommandConstants.PNGS_TO_ICO: {
                    logger.info("command", { command });
                    const sourceFolder = commandLineParser.getStringArgument(commandLineArgConstants_1.CommandLineArgConstants.SOURCE_FOLDER);
                    const sourceFiles = commandLineParser.getStringArgument(commandLineArgConstants_1.CommandLineArgConstants.SOURCE_FILES);
                    const destFile = commandLineParser.getStringArgument(commandLineArgConstants_1.CommandLineArgConstants.DEST_FILE);
                    ret = this.checkRemaining(logger, commandLineParser);
                    if (ret === 0) {
                        const ico = new ico_1.ICO();
                        ret = yield ico.fromPngs(logger, fileSystem, sourceFolder, sourceFiles ? sourceFiles.split(",") : [], fileSystem.pathGetDirectory(destFile), fileSystem.pathGetFilename(destFile));
                    }
                    break;
                }
                case commandLineCommandConstants_1.CommandLineCommandConstants.PNG_TO_ICNS: {
                    logger.info("command", { command });
                    const sourceFile = commandLineParser.getStringArgument(commandLineArgConstants_1.CommandLineArgConstants.SOURCE_FILE);
                    const destFile = commandLineParser.getStringArgument(commandLineArgConstants_1.CommandLineArgConstants.DEST_FILE);
                    ret = this.checkRemaining(logger, commandLineParser);
                    if (ret === 0) {
                        const icns = new icns_1.ICNS();
                        ret = yield icns.fromPng(logger, fileSystem, fileSystem.pathGetDirectory(sourceFile), fileSystem.pathGetFilename(sourceFile), fileSystem.pathGetDirectory(destFile), fileSystem.pathGetFilename(destFile));
                    }
                }
            }
            return ret;
        });
    }
    displayHelp(logger) {
        logger.banner("Commands");
        logger.info("  help, version, svgToPng, svgToMask, pngsToIco");
        logger.info("");
        logger.banner("svgToPng");
        logger.info("");
        this.markdownTableToCli(logger, "| sourceFile          | 'path to svg file'                           | Source svg image to generate png                 |");
        this.markdownTableToCli(logger, "| destFile            | 'path to png file'                           | Destination image for generated png              |");
        this.markdownTableToCli(logger, "| width               | number                                       | The width in pixels to generate png              |");
        this.markdownTableToCli(logger, "| height              | number                                       | The height in pixels to generate png             |");
        this.markdownTableToCli(logger, "| marginX             | number                                       | The margin in pixels to leave at left and right  |");
        this.markdownTableToCli(logger, "|                     |                                              |   optional - defaults to 0                       |");
        this.markdownTableToCli(logger, "| marginY             | number                                       | The margin in pixels to leave at top and bottom  |");
        this.markdownTableToCli(logger, "|                     |                                              |   optional - defaults to 0                       |");
        this.markdownTableToCli(logger, "| background          | hex color                                    | The colour to fill the background                |");
        this.markdownTableToCli(logger, "|                     |                                              |   optional - defaults to transparent             |");
        logger.info("");
        logger.banner("svgToMask");
        logger.info("");
        this.markdownTableToCli(logger, "| sourceFile          | 'path to svg file'                           | Source svg image to generate svg mask            |");
        this.markdownTableToCli(logger, "| destFile            | 'path to svg mask file'                      | Destination image for generated svg mask         |");
        logger.info("");
        logger.banner("pngsToIco");
        logger.info("");
        this.markdownTableToCli(logger, "| sourceFolder        | 'folder'                                     | The folder that contains the png files           |");
        this.markdownTableToCli(logger, "| sourceFiles         | comma separated list of filenames            | The files to combine from the sourceFolder       |");
        this.markdownTableToCli(logger, "| destFile            | 'path to ico file'                           | Destination image for generated ico              |");
        logger.info("");
        logger.banner("pngToIcns");
        logger.info("");
        this.markdownTableToCli(logger, "| sourceFile          | 'path to png file'                           | Source png image to generate icns                |");
        this.markdownTableToCli(logger, "| destFile            | 'path to icns file'                          | Destination image for generated icns             |");
        logger.info("");
        logger.banner("Global Arguments");
        logger.info("");
        this.markdownTableToCli(logger, "| noColor             |                                           | If this is used no color will appear in output   |");
        this.markdownTableToCli(logger, "|                     |                                           |   optional - defaults to on                      |");
        this.markdownTableToCli(logger, "| logFile             | 'filename'                                | The log file to store the logging in             |");
        this.markdownTableToCli(logger, "|                     |                                           |   optional - defaults to no file logging         |");
        this.markdownTableToCli(logger, "");
        logger.info("");
        logger.banner("More Information");
        logger.info("");
        logger.info("  See https://github.com/unitejs/image-cli#readme for further details.");
        return 0;
    }
}
CLI.APP_NAME = "UniteJS Image";
exports.CLI = CLI;

//# sourceMappingURL=data:application/json;charset=utf8;base64,
